
;; This code will create either a puppy or a kitten image that roatates through 10 postions we could increase or decrease that 
;; number. I need to figure out how to adjust it so that we can place images on the left. We will write a cond for whether it
;; is a kitten or a puppy. We could add more too.


#lang racket
(require gigls/unsafe)
(define kitten (image-show (image-load "/home/rebelsky/Desktop/kitten.jpg")))
(define kitten2 (image-show (image-load "/home/hoeghstu17/Desktop/happy-kitten.jpg")))
 (define collage (image-show (image-new 300 200)))
(define puppy (image-show (image-load "/home/hoeghstu17/Desktop/Puppy1.jpg")))

(define int->list
  (lambda (n)
    (list (quotient n 100) (quotient (remainder n 100) 10) (remainder n 10))))

(define column#
  (lambda (image source n row)
 (section image-select-rectangle! source REPLACE <> (* row (/ (image-height source) n)) (/ (image-width source) n) (/ (image-height source) n))))

(define drella!4
  (lambda (image source n row)
    (image-select-rectangle! image REPLACE 0 0 (image-width image) (image-height image))
    (gimp-edit-copy-visible image)
    (map (column# image source n row) (map * (make-list n n) (iota n)))
    (let ([pasted (car (gimp-edit-paste (image-get-layer source) 1))])
      (image-select-nothing! image)
      (gimp-layer-scale pasted (/ (image-width source) n) (/ (image-height source) n) 1)
      (gimp-image-flatten source)
      source)))

(define kitten-place
  (lambda (image n)
    (drella!4 kitten2 image 10 (car (cddr (int->list n)))))) 

(define puppy-place
  (lambda (image n)
    (drella!4 puppy image (+ 1 (car (cddr (int->list n)))) (car (cddr (int->list n))))))
    
    
 ;;; This was actually in the helper questions portion. I don't believe that it scales it tho.
 
    ;;; Procedure:
;;;   overlay-rectangle!
;;; Parameters:
;;;   source, an image
;;;   target, an image
;;;   source-x, a real number
;;;   source-y, a real number
;;;   target-x, a real number
;;;   target-y, a real number
;;;   width, a positive integer
;;;   height, a positive integer
;;; Purpose:
;;;   Copy a width-by-height rectangle from source to target
;;; Produces:
;;;   [Nothing; called for the side effect.]
;;; Preconditions:
;;;   The selections must be within the given images.
;;; Postconditions:
;;;   For all 0 <= i < width, 0 <= j < height,
;;;     (image-get-pixel target (+ i target-x) (+ j target-y)) =
;;;       (image-get-pixel source (+ i target-x) (+ j target-y))
;;; Ponderings:
;;;   Does not show the update to the image.  You will need to call
;;;   (context-update-displays!) afterwards.
(define overlay-rectangle!
 (lambda (source target source-x source-y target-x target-y width height)
   ; Copy from the source
   (image-select-rectangle! source REPLACE source-x source-y width height)
   (gimp-edit-copy (image-get-layer source))
   (image-select-nothing! source)
   ; Paste into the target
   (image-select-rectangle! target REPLACE target-x target-y width height)
   (gimp-edit-paste (image-get-layer target) 1)
   (gimp-image-flatten target)
   (image-select-nothing! target)))
