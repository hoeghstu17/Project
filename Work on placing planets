
;; This code will create either a puppy or a kitten image that roatates through 10 postions we could increase or decrease that 
;; number. I need to figure out how to adjust it so that we can place images on the left. We will write a cond for whether it
;; is a kitten or a puppy. We could add more too.


#lang racket
(require gigls/unsafe)
(define kitten (image-show (image-load "/home/rebelsky/Desktop/kitten.jpg")))
(define kitten2 (image-show (image-load "/home/hoeghstu17/Desktop/happy-kitten.jpg")))
 (define collage (image-show (image-new 300 200)))
(define puppy (image-show (image-load "/home/hoeghstu17/Desktop/Puppy1.jpg")))

(define int->list
  (lambda (n)
    (list (quotient n 100) (quotient (remainder n 100) 10) (remainder n 10))))

(define column#
  (lambda (image source n row)
 (section image-select-rectangle! source REPLACE <> (* row (/ (image-height source) n)) (/ (image-width source) n) (/ (image-height source) n))))

(define drella!4
  (lambda (image source n row)
    (image-select-rectangle! image REPLACE 0 0 (image-width image) (image-height image))
    (gimp-edit-copy-visible image)
    (map (column# image source n row) (map * (make-list n n) (iota n)))
    (let ([pasted (car (gimp-edit-paste (image-get-layer source) 1))])
      (image-select-nothing! image)
      (gimp-layer-scale pasted (/ (image-width source) n) (/ (image-height source) n) 1)
      (gimp-image-flatten source)
      source)))

(define kitten-place
  (lambda (image n)
    (drella!4 kitten2 image 10 (car (cddr (int->list n)))))) 

(define puppy-place
  (lambda (image n)
    (drella!4 puppy image (+ 1 (car (cddr (int->list n)))) (car (cddr (int->list n))))))
